// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Microsoft.Azure.Functions.Worker.Sdk
{
    internal static class FunctionMetadataCSharpWriter
    {
        private const string FileName = "FunctionMetadataGenerator.cs";

        public static void WriteMetadata(IEnumerable<SdkFunctionMetadata> functions, string metadataFileDirectory)
        {
            string metadataFile = Path.Combine(metadataFileDirectory, FileName);
            using var fs = new FileStream(metadataFile, FileMode.Create, FileAccess.Write);
            using var writer = new StreamWriter(fs);

            string functionMetadataInfo = GetFunctionMetadataAsString(functions);
            string metadataProvider = $$"""
                         // <auto-generated/>
                         using System;
                         using System.Collections.Generic;
                         using System.Collections.Immutable;
                         using System.Text.Json;
                         using System.Threading.Tasks;
                         using Microsoft.Azure.Functions.Worker.Core.FunctionMetadata;
                         using Microsoft.Extensions.DependencyInjection;
                         using Microsoft.Extensions.Hosting;
                     
                         namespace Microsoft.Azure.Functions.Worker
                         {
                             public class GeneratedFunctionMetadataProvider : IFunctionMetadataProvider
                             {
                                 public Task<ImmutableArray<IFunctionMetadata>> GetFunctionMetadataAsync(string directory)
                                 {
                                     var metadataList = new List<IFunctionMetadata>();
                         {{functionMetadataInfo}}
                                     return Task.FromResult(metadataList.ToImmutableArray());
                                 }
                             }
                     
                             public static class WorkerHostBuilderFunctionMetadataProviderExtension
                             {
                                 ///<summary>
                                 /// Adds the GeneratedFunctionMetadataProvider to the service collection.
                                 /// During initialization, the worker will return generated function metadata instead of relying on the Azure Functions host for function indexing.
                                 ///</summary>
                                 public static IHostBuilder ConfigureGeneratedFunctionMetadataProvider(this IHostBuilder builder)
                                 {
                                     builder.ConfigureServices(s => 
                                     {
                                         s.AddSingleton<IFunctionMetadataProvider, GeneratedFunctionMetadataProvider>();
                                     });
                                     return builder;
                                 }
                             }
                         }
                         """;

            writer.Write(metadataProvider);
            writer.Close();
            fs.Close();
        }

        private static string GetFunctionMetadataAsString(IEnumerable<SdkFunctionMetadata> functionMetadata)
        {
            var functionCount = 0;
            var builder = new StringBuilder();

            foreach (var function in functionMetadata)
            {
                // we're going to base variable names on Function[Num] because some function names have characters we can't use for a dotnet variable
                var functionVariableName = "Function" + functionCount.ToString();

                builder.AppendLine(
                $$"""
                                var {{functionVariableName}} = new DefaultFunctionMetadata
                                {
                                    Language = "dotnet-isolated",
                                    Name = "{{function.Name}}",
                                    EntryPoint = "{{function.EntryPoint}}",
                                    ScriptFile = "{{function.ScriptFile}}"
                                };
                                metadataList.Add({{functionVariableName}});
                    """);
                functionCount++;
            }

            return builder.ToString();
        }
    }
}

